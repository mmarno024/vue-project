{
  "version": 3,
  "sources": ["../../vue-google-charts/src/lib/google-charts-loader.ts", "../../vue-google-charts/src/utils.ts", "../../vue-google-charts/src/lib/debounce.ts", "../../vue-google-charts/src/components/GChart.ts", "../../vue-google-charts/src/index.ts"],
  "sourcesContent": ["/**\n * Usage:\n * import { loadGoogleCharts } from 'vue-google-charts'\n *\n * loadGoogleCharts('current', { packages: ['corechart', 'map'] })\n *  .then(google => {\n *    const chart = new google.visualization.Map ...\n *  })\n */\n\nimport type {\n  GoogleViz,\n  GoogleChartLoader,\n  GoogleChartVersion,\n  GoogleChartLoaderOptions,\n} from '../types';\n\nconst chartsScriptUrl = 'https://www.gstatic.com/charts/loader.js';\n\nlet chartsLoaderPromise: null | Promise<GoogleChartLoader> = null;\n\nconst loadedPackages = new Map();\n\nexport function getChartsLoader(): Promise<GoogleChartLoader> {\n  // If already included in the page:\n  if (window.google !== undefined) {\n    return Promise.resolve(window.google.charts);\n  }\n\n  if (chartsLoaderPromise === null) {\n    chartsLoaderPromise = new Promise(resolve => {\n      // Find script tag with same src in DOM.\n      const foundScript = document.querySelector<HTMLScriptElement>(\n        `script[src=\"${chartsScriptUrl}\"]`\n      );\n\n      // Create or get existed tag.\n      const script = foundScript || document.createElement('script');\n\n      // Set src if no script was found.\n      if (!foundScript) {\n        script.src = chartsScriptUrl;\n        script.type = 'text/javascript';\n\n        document.head.append(script);\n      }\n\n      script.onload = () => {\n        if (window.google !== undefined) {\n          resolve(window.google.charts);\n        }\n      };\n    });\n  }\n\n  return chartsLoaderPromise;\n}\n\n/**\n * Function to load Google Charts JS API.\n * @param version - Chart version to load.\n * @param packages - Packages to load.\n * @param language - Languages to load.\n * @param mapsApiKey - Google Maps api key.\n * @returns\n */\nexport async function loadGoogleCharts(\n  version: GoogleChartVersion = 'current',\n  {\n    packages = ['corechart', 'controls'],\n    language = 'en',\n    mapsApiKey,\n  }: GoogleChartLoaderOptions\n): Promise<GoogleViz | undefined> {\n  const loader = await getChartsLoader();\n\n  const settingsKey = `${version}_${packages.join('_')}_${language}`;\n\n  if (loadedPackages.has(settingsKey)) return loadedPackages.get(settingsKey);\n\n  const loaderPromise: Promise<GoogleViz | undefined> = new Promise(resolve => {\n    loader.load(version, {\n      packages,\n      language,\n      mapsApiKey,\n    });\n\n    loader.setOnLoadCallback(() => resolve(window.google));\n  });\n\n  loadedPackages.set(settingsKey, loaderPromise);\n\n  return loaderPromise;\n}\n", "import {\n  GoogleChartWrapper,\n  GoogleChartWrapperChartType,\n  GoogleDataTable,\n  GoogleDataView,\n  GoogleViz,\n  GoogleVizEventName,\n  GoogleVizEvents,\n} from './types';\n\nexport interface ICreateChartFunction {\n  (\n    el: HTMLElement,\n    google: GoogleViz,\n    type: GoogleChartWrapperChartType\n  ): GoogleChartWrapper;\n}\n\nexport function getValidChartData(\n  chartsLib: null | GoogleViz,\n  data: unknown[][] | GoogleDataTable | Record<string, any> | null,\n  isFirstRowLabels?: boolean\n): GoogleDataTable | GoogleDataView | null {\n  if (chartsLib !== null && data instanceof chartsLib.visualization.DataTable) {\n    return data;\n  }\n\n  if (chartsLib !== null && data instanceof chartsLib.visualization.DataView) {\n    return data;\n  }\n\n  if (chartsLib !== null && Array.isArray(data)) {\n    return chartsLib.visualization.arrayToDataTable(data, isFirstRowLabels);\n  }\n\n  if (chartsLib !== null && data !== null && typeof data === 'object') {\n    return new chartsLib.visualization.DataTable(data);\n  }\n\n  return null;\n}\n\nexport function createChartObject(\n  chartsLib: GoogleViz | null,\n  chartObject: GoogleChartWrapper | null,\n  chartEl: HTMLElement | null,\n  chartType: GoogleChartWrapperChartType,\n  chartEvents: GoogleVizEvents | null,\n  createChartFunction?: ICreateChartFunction\n): GoogleChartWrapper | null {\n  const createChart: ICreateChartFunction = (\n    el: HTMLElement,\n    google: GoogleViz,\n    type: GoogleChartWrapperChartType\n  ): GoogleChartWrapper => {\n    if (type === undefined) {\n      throw new Error('please, provide chart type property');\n    }\n\n    return new google.visualization[type](el);\n  };\n\n  if (chartsLib === null) {\n    throw new Error('please, provide charts lib property');\n  }\n\n  if (chartEl === null) {\n    throw new Error('please, provide chart element property');\n  }\n\n  const fn = createChartFunction || createChart;\n\n  chartObject = fn(chartEl, chartsLib, chartType);\n\n  attachListeners(chartsLib, chartObject, chartEvents);\n\n  return chartObject;\n}\n\nfunction attachListeners(\n  chartsLib: null | GoogleViz,\n  chartObject: GoogleChartWrapper | null,\n  chartEvents: GoogleVizEvents | null\n): void {\n  if (chartEvents === null) {\n    return;\n  }\n\n  for (const [event, listener] of Object.entries(chartEvents)) {\n    if (chartsLib !== null && chartObject !== null) {\n      chartsLib.visualization.events.addListener(\n        chartObject,\n        event as GoogleVizEventName,\n        listener as (chartWrapper: GoogleChartWrapper) => any\n      );\n    }\n  }\n}\n", "export interface DebouncedFunction<\n  Args extends any[],\n  F extends (...args: Args) => any\n> {\n  (this: ThisParameterType<F>, ...args: Args & Parameters<F>): void;\n}\n\nexport function debounce<Args extends any[], F extends (...args: Args) => any>(\n  func: F,\n  waitMilliseconds = 50\n): DebouncedFunction<Args, F> {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  function nextInvokeTimeout() {\n    return waitMilliseconds;\n  }\n\n  const debouncedFunction = function (\n    this: ThisParameterType<F>,\n    ...args: Parameters<F>\n  ) {\n    const context = this;\n\n    const invokeFunction = function () {\n      timeoutId = undefined;\n\n      func.apply(context, args);\n    };\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(invokeFunction, nextInvokeTimeout());\n  };\n\n  return debouncedFunction;\n}\n", "import {\n  defineComponent,\n  ref,\n  h,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  PropType,\n} from 'vue';\n\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleChartWrapperChartType,\n  GoogleChartOptions,\n  GoogleChartVersion,\n  GoogleChartLoaderOptions,\n  GoogleVizEvents,\n  GoogleDataTable,\n} from '../types';\n\nimport {\n  createChartObject,\n  getValidChartData,\n  ICreateChartFunction,\n} from '../utils';\n\nimport { loadGoogleCharts } from '../lib/google-charts-loader';\nimport { debounce } from '../lib/debounce';\n\nlet chartsLib: null | GoogleViz = null;\n\nexport const GChart = defineComponent({\n  name: 'GChart',\n  props: {\n    type: {\n      type: String as PropType<GoogleChartWrapperChartType>,\n      required: true,\n    },\n    data: {\n      type: [Array, Object, null] as PropType<\n        unknown[][] | GoogleDataTable | Record<string, any> | null\n      >,\n      default: () => [],\n    },\n    isFirstRowLabels: {\n      type: Boolean,\n      default: false,\n    },\n    options: {\n      type: Object as PropType<GoogleChartOptions>,\n      default: () => ({}),\n    },\n    version: {\n      type: String as PropType<GoogleChartVersion>,\n      default: 'current',\n    },\n    settings: {\n      type: Object as PropType<GoogleChartLoaderOptions>,\n      default: () => ({\n        packages: ['corechart', 'table'],\n      }),\n    },\n    events: {\n      type: Object as PropType<GoogleVizEvents | null>,\n      default: null,\n    },\n    createChart: {\n      type: Function as PropType<ICreateChartFunction>,\n      default: undefined,\n    },\n    resizeDebounce: {\n      type: Number,\n      default: 200,\n    },\n  },\n  setup(props, { emit }) {\n    const chartObject = ref<GoogleChartWrapper | null>(null);\n    const chartEl = ref<HTMLElement | null>(null);\n\n    function drawChart(): void {\n      if (chartsLib === null || chartObject.value === null) {\n        return;\n      }\n\n      const data = getValidChartData(\n        chartsLib,\n        props.data,\n        props.isFirstRowLabels\n      );\n      if (data !== null) {\n        chartObject.value?.draw(data, props.options);\n      }\n    }\n\n    watch(\n      () => props.data,\n      () => drawChart(),\n      { deep: true }\n    );\n\n    watch(\n      () => props.options,\n      () => drawChart(),\n      { deep: true }\n    );\n\n    watch(\n      () => props.type,\n      () => {\n        chartObject.value = createChartObject(\n          chartsLib,\n          chartObject.value,\n          chartEl.value,\n          props.type,\n          props.events,\n          props.createChart\n        );\n\n        drawChart();\n      }\n    );\n\n    onMounted(() => {\n      loadGoogleCharts(props.version, props.settings).then(api => {\n        if (api !== undefined) {\n          chartsLib = api;\n\n          chartObject.value = createChartObject(\n            chartsLib,\n            chartObject.value,\n            chartEl.value,\n            props.type,\n            props.events,\n            props.createChart\n          );\n\n          emit('ready', chartObject.value, api);\n\n          drawChart();\n        }\n      });\n\n      if (props.resizeDebounce > 0) {\n        window.addEventListener(\n          'resize',\n          debounce(drawChart, props.resizeDebounce) as EventListener\n        );\n      }\n    });\n\n    onBeforeUnmount(() => {\n      if (\n        chartObject.value !== null &&\n        typeof chartObject.value.clearChart === 'function'\n      ) {\n        chartObject.value.clearChart();\n      }\n\n      if (props.resizeDebounce > 0) {\n        window.removeEventListener(\n          'resize',\n          debounce(drawChart, props.resizeDebounce) as EventListener\n        );\n      }\n    });\n\n    return () => h('div', { ref: chartEl }, []);\n  },\n});\n", "import { createApp } from 'vue';\n\nimport { loadGoogleCharts } from './lib/google-charts-loader';\nimport { GChart } from './components/GChart';\n\nconst app = createApp({});\n\n// Install the components\nexport function install() {\n  app.component('GChart', GChart);\n}\n\n// Expose the components\nexport { loadGoogleCharts, GChart };\n\n/* -- Plugin definition & Auto-install -- */\n/* You shouldn't have to modify the code below */\n\n// Plugin\nconst plugin = {\n  version: process.env.VERSION,\n  install,\n};\n\nexport default plugin;\n\n// Auto-install\nlet GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n}\n\nif (GlobalVue !== null && GlobalVue !== undefined) {\n  app.use(plugin);\n}\n"],
  "mappings": "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",
  "names": ["chartsScriptUrl", "chartsLoaderPromise", "loadedPackages", "Map", "getChartsLoader", "window", "google", "undefined", "Promise", "resolve", "charts", "foundScript", "document", "querySelector", "script", "createElement", "src", "type", "head", "append", "onload", "loadGoogleCharts", "version", "packages", "language", "mapsApiKey", "loader", "settingsKey", "join", "has", "get", "loaderPromise", "load", "setOnLoadCallback", "set", "getValidChartData", "chartsLib", "data", "isFirstRowLabels", "visualization", "DataTable", "DataView", "Array", "isArray", "arrayToDataTable", "createChartObject", "chartObject", "chartEl", "chartType", "chartEvents", "createChartFunction", "createChart", "el", "Error", "fn", "attachListeners", "event", "listener", "Object", "entries", "events", "addListener", "debounce", "func", "waitMilliseconds", "timeoutId", "nextInvokeTimeout", "debouncedFunction", "args", "context", "invokeFunction", "apply", "clearTimeout", "setTimeout", "GChart", "defineComponent", "name", "props", "String", "required", "default", "Boolean", "options", "settings", "Function", "resizeDebounce", "Number", "setup", "emit", "ref", "drawChart", "value", "draw", "watch", "deep", "onMounted", "then", "api", "addEventListener", "onBeforeUnmount", "clearChart", "removeEventListener", "h", "app", "createApp", "install", "component", "plugin", "GlobalVue", "Vue", "use"]
}
