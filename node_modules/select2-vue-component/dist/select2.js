import { defineComponent, nextTick } from 'vue';
import * as common from 'select2-component';
export * from 'select2-component';
import { select2TemplateHtml } from './variables';
/**
 * @public
 */
export var Select2 = defineComponent({
    render: select2TemplateHtml,
    props: {
        data: {
            type: Array,
            required: true,
        },
        value: [String, Number, Boolean, Array],
        disabled: Boolean,
        minCountForSearch: Number,
        placeholder: String,
        customSearchEnabled: Boolean,
        multiple: Boolean,
        minimumInputLength: Number,
        maximumInputLength: Number,
        keepSearchText: Boolean,
    },
    data: function () {
        return {
            option: null,
            hoveringValue: null,
            isOpen: false,
            focusoutTimer: undefined,
            innerSearchText: '',
            lastScrollTopIndex: 0,
            searchInputElement: undefined,
            resultsElement: undefined,
        };
    },
    computed: {
        searchText: {
            get: function () {
                return this.innerSearchText;
            },
            set: function (text) {
                if (this.customSearchEnabled) {
                    this.$emit('search', text);
                }
                this.innerSearchText = text;
            },
        },
        dropdownStyle: function () {
            return common.getDropdownStyle(this.isOpen);
        },
        filteredData: function () {
            var result = this.customSearchEnabled
                || (this.minimumInputLength && this.minimumInputLength > this.searchText.length)
                ? this.data
                : common.getFilteredData(this.data, this.searchText);
            if (common.valueIsNotInFilteredData(result, this.hoveringValue)) {
                this.hoveringValue = common.getFirstAvailableOption(result);
                if (this.resultsElement) {
                    var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, result, this.lastScrollTopIndex);
                    if (lastScrollTopIndex !== null) {
                        this.lastScrollTopIndex = lastScrollTopIndex;
                    }
                }
            }
            return result;
        },
        containerStyle: function () {
            return common.getContainerStyle(this.disabled, this.isOpen);
        },
        selectionStyle: function () {
            return common.getSelectionStyle(this.multiple);
        },
        isSearchboxHidden: function () {
            return this.customSearchEnabled
                ? false
                : common.isSearchboxHiddex(this.data, this.minCountForSearch);
        },
        searchStyle: function () {
            return common.getSearchStyle(this.isSearchboxHidden);
        },
    },
    beforeMount: function () {
        var option = common.getOptionsByValue(this.data, this.value, this.multiple);
        if (option !== null) {
            this.option = option;
        }
        if (!Array.isArray(option)) {
            this.hoveringValue = this.value;
        }
    },
    mounted: function () {
        var _this = this;
        this.searchInputElement = this.$refs.searchInput;
        this.resultsElement = this.$refs.results;
        this.$watch('value', function () {
            var option = common.getOptionsByValue(_this.data, _this.value, _this.multiple);
            _this.option = option;
            if (!Array.isArray(option)) {
                _this.hoveringValue = _this.value;
            }
        });
    },
    beforeUnmount: function () {
        this.cancelFocusoutTimer();
    },
    methods: {
        getOptionStyle: function (option) {
            return common.getOptionStyle(option, this.hoveringValue);
        },
        mouseenter: function (option) {
            if (!option.disabled) {
                this.hoveringValue = option.value;
            }
        },
        click: function (option) {
            if (!option.disabled) {
                this.select(option);
            }
            if (this.focusoutTimer) {
                clearTimeout(this.focusoutTimer);
            }
        },
        toggleOpenAndClose: function () {
            var _this = this;
            if (this.disabled) {
                return;
            }
            this.isOpen = !this.isOpen;
            if (this.isOpen) {
                if (!this.keepSearchText) {
                    this.innerSearchText = '';
                }
                nextTick(function () {
                    _this.focusSearchboxOrResultsElement();
                    if (_this.resultsElement) {
                        var lastScrollTopIndex = common.getLastScrollTopIndex(_this.hoveringValue, _this.resultsElement, _this.data, _this.lastScrollTopIndex);
                        if (lastScrollTopIndex !== null) {
                            _this.lastScrollTopIndex = lastScrollTopIndex;
                        }
                    }
                });
                this.$emit('open');
            }
            if (this.focusoutTimer) {
                clearTimeout(this.focusoutTimer);
            }
        },
        focusout: function () {
            var _this = this;
            this.focusoutTimer = setTimeout(function () {
                _this.isOpen = false;
                _this.focusoutTimer = undefined;
            }, common.timeout);
        },
        select: function (option) {
            if (option !== null) {
                if (this.multiple) {
                    var options = this.option;
                    var index = options.findIndex(function (op) { return op.value === option.value; });
                    if (index === -1) {
                        options.push(option);
                    }
                    else {
                        options.splice(index, 1);
                    }
                }
                else {
                    this.option = option;
                    this.isOpen = false;
                }
            }
            this.$emit('update', this.multiple ? this.option.map(function (op) { return op.value; }) : this.option.value);
        },
        keyDown: function (e) {
            this.$emit('keydown', e);
            if (e.keyCode === 40) {
                this.moveDown();
                e.preventDefault();
            }
            else if (e.keyCode === 38) {
                this.moveUp();
                e.preventDefault();
            }
            else if (e.keyCode === 13) {
                this.selectByEnter();
                e.preventDefault();
            }
        },
        keyUp: function (e) {
            this.$emit('keyup', e);
        },
        keyPress: function (e) {
            this.$emit('keypress', e);
        },
        isSelected: function (option) {
            return common.isSelected(this.option, option, this.multiple);
        },
        isDisabled: function (option) {
            return option.disabled ? 'true' : 'false';
        },
        removeSelection: function (e, option) {
            var _this = this;
            common.removeSelection(this.option, option);
            this.$emit('update', this.option.map(function (op) { return op.value; }));
            e.preventDefault();
            e.stopPropagation();
            if (this.isOpen) {
                nextTick(function () {
                    _this.focusSearchboxOrResultsElement();
                });
            }
            if (this.focusoutTimer) {
                clearTimeout(this.focusoutTimer);
            }
        },
        focusSearchboxOrResultsElement: function () {
            if (!this.isSearchboxHidden) {
                if (this.searchInputElement) {
                    this.searchInputElement.focus();
                }
            }
            else {
                if (this.resultsElement) {
                    this.resultsElement.focus();
                }
            }
        },
        moveUp: function () {
            this.hoveringValue = common.getPreviousOption(this.filteredData, this.hoveringValue);
            if (this.resultsElement) {
                var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.filteredData, this.lastScrollTopIndex);
                if (lastScrollTopIndex !== null) {
                    this.lastScrollTopIndex = lastScrollTopIndex;
                }
            }
        },
        moveDown: function () {
            this.hoveringValue = common.getNextOption(this.filteredData, this.hoveringValue);
            if (this.resultsElement) {
                var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.filteredData, this.lastScrollTopIndex);
                if (lastScrollTopIndex !== null) {
                    this.lastScrollTopIndex = lastScrollTopIndex;
                }
            }
        },
        selectByEnter: function () {
            if (this.hoveringValue) {
                var option = common.getOptionByValue(this.data, this.hoveringValue);
                this.select(option);
            }
        },
        cancelFocusoutTimer: function () {
            if (this.focusoutTimer) {
                clearTimeout(this.focusoutTimer);
            }
        },
    }
});
