/// <reference types="node" />
import { PropType } from 'vue';
import * as common from 'select2-component';
export * from 'select2-component';
/**
 * @public
 */
export declare const Select2: import("vue").DefineComponent<{
    data: {
        type: PropType<common.Select2Data>;
        required: true;
    };
    value: PropType<common.Select2UpdateValue>;
    disabled: BooleanConstructor;
    minCountForSearch: NumberConstructor;
    placeholder: StringConstructor;
    customSearchEnabled: BooleanConstructor;
    multiple: BooleanConstructor;
    minimumInputLength: NumberConstructor;
    maximumInputLength: NumberConstructor;
    keepSearchText: BooleanConstructor;
}, unknown, {
    option: common.Select2Option | common.Select2Option[] | null;
    hoveringValue: common.Select2Value | null | undefined;
    isOpen: boolean;
    focusoutTimer: NodeJS.Timer | undefined;
    innerSearchText: string;
    lastScrollTopIndex: number;
    searchInputElement: HTMLElement | undefined;
    resultsElement: HTMLElement | undefined;
}, {
    searchText: {
        get(): string;
        set(text: string): void;
    };
    dropdownStyle(): string;
    filteredData(): common.Select2Data;
    containerStyle(): string;
    selectionStyle(): string;
    isSearchboxHidden(): boolean;
    searchStyle(): string;
}, {
    getOptionStyle(option: common.Select2Option): string;
    mouseenter(option: common.Select2Option): void;
    click(option: common.Select2Option): void;
    toggleOpenAndClose(): void;
    focusout(): void;
    select(option: common.Select2Option | null): void;
    keyDown(e: KeyboardEvent): void;
    keyUp(e: KeyboardEvent): void;
    keyPress(e: KeyboardEvent): void;
    isSelected(option: common.Select2Option): "true" | "false";
    isDisabled(option: common.Select2Option): "true" | "false";
    removeSelection(e: MouseEvent, option: common.Select2Option): void;
    focusSearchboxOrResultsElement(): void;
    moveUp(): void;
    moveDown(): void;
    selectByEnter(): void;
    cancelFocusoutTimer(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    data?: unknown;
    value?: unknown;
    disabled?: unknown;
    minCountForSearch?: unknown;
    placeholder?: unknown;
    customSearchEnabled?: unknown;
    multiple?: unknown;
    minimumInputLength?: unknown;
    maximumInputLength?: unknown;
    keepSearchText?: unknown;
} & {
    data: common.Select2Data;
    disabled: boolean;
    customSearchEnabled: boolean;
    multiple: boolean;
    keepSearchText: boolean;
} & {
    value?: common.Select2UpdateValue | undefined;
    minCountForSearch?: number | undefined;
    placeholder?: string | undefined;
    minimumInputLength?: number | undefined;
    maximumInputLength?: number | undefined;
}>, {
    disabled: boolean;
    customSearchEnabled: boolean;
    multiple: boolean;
    keepSearchText: boolean;
}>;
